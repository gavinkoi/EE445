import csv
import matplotlib.pyplot as plt
import math
import numpy as np

def perceptron_learning_algorithm(x1, x2, y, n, max_val, min_val):
    posy = 0
    negy = 0

    if y >= 0:
            posy += 1
    else:
            negy += 1
    
    data = []
    for i in range(0,posy):
            data.append([1,x1[i],x2[i],1])
    for j in range(0,negy):
          data.append([1,x1[j],x2[j],1])
    

    weight = [0,0,0]
    count = 0

    sort = False
    while not sort:
        count += 1
        data_flag = 0
    for datapoint in data:
            if(weight[0]*datapoint[0] + weight[1]*datapoint[1]  + weight[2]*datapoint[2]  != datapoint[3]):
                    weight[0] += datapoint[0] * datapoint[3]
                    weight[1] += datapoint[1] * datapoint[3]
                    weight[2] += datapoint[2] * datapoint[3]
            else:
                data_flag += 1
            if(data_flag == n):
                sort = True
            
    return count, weight[];
        
#(a)
file = open('20sample_d2.csv')
csvreader = csv.reader(file)
x1 = []
x2 = []
y = []
for row in csvreader:
    x1.append(float(row[0]))
    x2.append(float(row[1]))
    y.append(float(row[2]))
file.close()
max_val = max(max(x1), max(x2))
min_val = min(min(x1), min(x2))
plt.plot([max_val, min_val], [max_val, min_val], label = 'Target Function');
plt.plot(x1, x2, 'o', color='black', label = 'Data points');
plt.xlabel('X axis')
plt.ylabel('Y axis')

#(b)
count = perceptron_learning_algorithm(x1, x2, y, 20, max_val, min_val)

m_g = -weight[1]/weight[2]
b_g = -weight[0]/weight[2]

plt.plot([max_val, min_val] ,m_g*np.arrange(min_val, max_val) + b_g)
